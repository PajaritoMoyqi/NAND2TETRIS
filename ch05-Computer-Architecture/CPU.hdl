// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=selectedVal); // if a-instruction, select it. else, select ALU output.
    Mux(a=true, b=instruction[5], sel=instruction[15], out=loadA);
    Mux(a=false, b=instruction[4], sel=instruction[15], out=loadD);

    DRegister(in=ALUout, load=loadD, out=operand1); // D register

    ARegister(in=selectedVal, load=loadA, out=outAReg, out[0..14]=addressM); // A register
    Mux16(a=outAReg, b=inM, sel=instruction[12], out=operand2);

    And(a=instruction[11], b=instruction[15], out=czx);
    And(a=instruction[10], b=instruction[15], out=cnx);
    And(a=instruction[9], b=instruction[15], out=czy);
    And(a=instruction[8], b=instruction[15], out=cny);
    And(a=instruction[7], b=instruction[15], out=cf);
    And(a=instruction[6], b=instruction[15], out=cno);

    ALU(x=operand1, y=operand2,
        zx=czx, nx=cnx, zy=czy, ny=cny, f=cf, no=cno,
        out=ALUout, zr=zrFlag, ng=ngFlag);
    Or16(a=ALUout, b=false, out=outM);

    // write or read Memory
    And(a=instruction[3], b=instruction[15], out=writeM);

    // jmp or not for PC
    Or(a=zrFlag, b=ngFlag, out=zrORngFlag); // (LE)
    Not(in=zrORngFlag, out=pFlag); // positive (GT)

    And(a=instruction[0], b=instruction[15], out=pCondition);
    And(a=instruction[1], b=instruction[15], out=zrCondition);
    And(a=instruction[2], b=instruction[15], out=ngCondition);

    And(a=pFlag, b=pCondition, out=GTjmp);
    And(a=zrFlag, b=zrCondition, out=EQjmp);
    And(a=ngFlag, b=ngCondition, out=LTjmp);

    Or(a=GTjmp, b=EQjmp, out=GEjmp);
    Or(a=GEjmp, b=LTjmp, out=jmpFlag);

    Not(in=jmpFlag, out=incFlag);

    PC(in=outAReg, load=jmpFlag, inc=incFlag, reset=reset, out[0..14]=pc); // Program Counter
}