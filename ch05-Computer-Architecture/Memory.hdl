// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    /* pseudo-code
        if address[14] = 1 and address[13] = 0 -> screen
        if address[14] = 1 and address[13] = 1 -> keyboard
        else (if address[14] = 0) -> RAM
    */
    // Check where to go(RAM or IO Memory)
    DMux(in=load, sel=address[14], a=memload, b=ioload);
    
    // Set appropriate address value for memory mapping
    Not16(in[0..14]=address, in[15]=true, out[0..13]=notscreenaddress);
    Not16(in[0..13]=notscreenaddress, in[14..15]=false, out[0..12]=screenaddress, out[0..13]=memaddress);
    
    // insert appropriate load and address for each device
    Keyboard(out=keyboardout);
    Screen(in=in, load=ioload, address=screenaddress, out=screenout);
    RAM16K(in=in, load=memload, address=memaddress, out=ramout);
    
    // Determine which output should go out
    Or16(a=keyboardout, b=screenout, out=ioout);
    Mux16(a=ramout, b=ioout, sel=address[14], out=out);
}